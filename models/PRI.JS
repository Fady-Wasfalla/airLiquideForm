const Sequelize = require('sequelize')
const db = require('../config/database')
const PRI = db.define('PRI', {
  formId: Sequelize.INTEGER,
  employeeName: Sequelize.STRING,
  /* First part of PRI form */
  businessUnit: Sequelize.STRING,
  projectName: Sequelize.STRING,
  projectLocation: Sequelize.STRING,
  capitalInvestment: Sequelize.STRING,
  deadlineSubmittingBid: Sequelize.date,
  Date: Sequelize.date,
  businessDeveloper: Sequelize.STRING,
  projectManager: Sequelize.STRING,
  ownerRepresentative: Sequelize.STRING,
  iRMR: Sequelize.STRING,

  // 1. Project description and general Cmts
  descriptionAndGeneralCmts: Sequelize.STRING,

  // 2. Facility or Equipment
  facilityOrEquipment: Sequelize.STRING,
  facilityOrEquipmentRemarks: Sequelize.STRING,
  applicationType: Sequelize.STRING,
  applicationTypeRemarks: Sequelize.STRING,
  projectType: Sequelize.STRING,
  projectTypeRemarks: Sequelize.STRING,
  facilityOrEquipmentSupply: Sequelize.STRING,
  facilityOrEquipmentCmts: Sequelize.STRING,
  fixedStandardBulk: Sequelize.Boolean,
  fixedBulkTankOnly: Sequelize.Boolean,
  onlySupplyOfProduct: Sequelize.Boolean,
  mobile: Sequelize.Boolean,
  onBoardEquipment: Sequelize.Boolean,
  onBoardEquipmentType: Sequelize.STRING,

  // 4. Site information
  // 4.1. Natural
  earthquake: Sequelize.Boolean,
  operationAffectedRegulatedArea: Sequelize.Boolean,
  weather: Sequelize.Boolean,
  flooding: Sequelize.Boolean,
  landslide: Sequelize.Boolean,
  salinity: Sequelize.Boolean,
  createPotentialEnvironmental: Sequelize.Boolean,
  pollutionRemediation: Sequelize.Boolean,
  operationsConditionsPotentially: Sequelize.Boolean,
  naturalCmts: Sequelize.Boolean,
  earthquakeCmt: Sequelize.STRING,
  operationAffectedRegulatedAreaCmt: Sequelize.STRING,
  weatherCmt: Sequelize.STRING,
  createPotentialEnvironmentalCmt: Sequelize.STRING,
  pollutionRemediationCmt: Sequelize.STRING,
  operationsConditionsPotentiallyCmt: Sequelize.STRING,
  naturalCmtsCmt: Sequelize.STRING,

  // 4.2 Industrial
  pollution: Sequelize.Boolean,
  highVoltageLines: Sequelize.Boolean,
  limitedSpacing: Sequelize.Boolean,
  hazardousMaterialStorage: Sequelize.Boolean,
  confinement: Sequelize.Boolean,
  potentialExistingSitePollution: Sequelize.Boolean,
  proximityToHighRisk: Sequelize.Boolean,
  proximityOfCombustibleMaterial: Sequelize.Boolean,
  undergroundNetwork: Sequelize.Boolean,
  properDrainage: Sequelize.Boolean,
  sittingInSafetyZone: Sequelize.Boolean,
  customerEquipmentNotFullyCompatible: Sequelize.Boolean,
  industrialCmts: Sequelize.Boolean,
  pollutionCmt: Sequelize.STRING,
  highVoltageLinesCapacity: Sequelize.float,
  highVoltageLinesDistanceToTank: Sequelize.float,
  limitedSpacingCmt: Sequelize.STRING,
  hazardousMaterialStorageCmt: Sequelize.STRING,
  confinementCmt: Sequelize.STRING,
  potentialExistingSitePollutionCmt: Sequelize.STRING,
  proximityToHighRiskCmt: Sequelize.STRING,
  proximityOfCombustibleMaterialCmt: Sequelize.STRING,
  undergroundNetworkDepth: Sequelize.float,
  sittingInSafetyZoneCmt: Sequelize.STRING,
  customerEquipmentNotFullyCompatibleCmt: Sequelize.STRING,
  industrialCmtsCmt: Sequelize.STRING,

  // 4.3 Population/Site location
  residentialArea: Sequelize.Boolean,
  publicBuilding: Sequelize.Boolean,
  transportationCorridor: Sequelize.Boolean,
  isolatedArea: Sequelize.Boolean,
  siteAccessibility: Sequelize.Boolean,
  highSecurityRisk: Sequelize.Boolean,
  populationCmts: Sequelize.Boolean,
  residentialAreaCmt: Sequelize.STRING,
  publicBuildingCmt: Sequelize.STRING,
  transportationCorridorCmt: Sequelize.STRING,
  isolatedAreaCmt: Sequelize.STRING,
  siteAccessibilityCmt: Sequelize.STRING,
  highSecurityRiskCmt: Sequelize.STRING,
  populationCmtsCmt: Sequelize.STRING,

  // 4.4. Customer
  financialSituation: Sequelize.Boolean,
  durabilityOfCustomerActivities: Sequelize.Boolean,
  newBusinessCustomer: Sequelize.Boolean,
  strategicCustomer: Sequelize.Boolean,
  customerCmts: Sequelize.Boolean,
  financialSituationCmt: Sequelize.STRING,
  durabilityOfCustomerActivitiesCmt: Sequelize.STRING,
  newBusinessCustomerCmt: Sequelize.STRING,
  strategicCustomerCmt: Sequelize.STRING,
  customerCmtsCmt: Sequelize.STRING,

  // 5. Project Organisation
  jointProjectThirdParties: Sequelize.Boolean,
  jointProjectInvolvingAirLiquide: Sequelize.Boolean,
  equipmentSuppliedByCustomer: Sequelize.Boolean,
  useStandBbyAssets: Sequelize.Boolean,
  necessaryDesignAuthorities: Sequelize.Boolean,
  projectSubmittedToThirdParty: Sequelize.Boolean,
  difficultyAccessExpertise: Sequelize.Boolean,
  issueOfResource: Sequelize.Boolean,
  projectOrganisationCmts: Sequelize.Boolean,
  jointProjectThirdPartiesCmt: Sequelize.STRING,
  jointProjectInvolvingAirLiquideCmt: Sequelize.STRING,
  equipmentSuppliedByCustomerCmt: Sequelize.STRING,
  useStandBbyAssetsCmt: Sequelize.STRING,
  necessaryDesignAuthoritiesCmt: Sequelize.STRING,
  projectSubmittedToThirdPartyCmt: Sequelize.STRING,
  difficultyAccessExpertiseCmt: Sequelize.STRING,
  issueOfResourceCmt: Sequelize.STRING,
  projectOrganisationCmtsCmt: Sequelize.STRING,

  // 6. Processes, Products, Technology (PPT), Equipment
  equipmentTechnologySupplier: Sequelize.Boolean,
  qualifiedValidatedEquipment: Sequelize.Boolean,
  newImposedAssociates: Sequelize.Boolean,
  innovationNewlyDeveloped: Sequelize.Boolean,
  projectUsingInnovativePpt: Sequelize.Boolean,
  intellectualPropertyWatch: Sequelize.Boolean,
  lackMainEquipments: Sequelize.Boolean,
  lackSimilarProcess: Sequelize.Boolean,
  majorProblemEncountered: Sequelize.Boolean,
  requirementsUtilitiesSpecification: Sequelize.Boolean,
  installatioProductRequireHazardous: Sequelize.Boolean,
  productsRawMaterials: Sequelize.Boolean,
  operationHaveNegativeImpact: Sequelize.Boolean,
  riskAnalysisProject: Sequelize.Boolean,
  previousRiskAnalysis: Sequelize.Boolean,
  processesProductsCmts: Sequelize.Boolean,
  equipmentTechnologySupplierCmt: Sequelize.STRING,
  qualifiedValidatedEquipmentCmt: Sequelize.STRING,
  newImposedAssociatesCmt: Sequelize.STRING,
  innovationNewlyDevelopedCmt: Sequelize.STRING,
  projectUsingInnovativePptCmt: Sequelize.STRING,
  intellectualPropertyWatchCmt: Sequelize.STRING,
  lackMainEquipmentsCmt: Sequelize.STRING,
  lackSimilarProcessCmt: Sequelize.STRING,
  majorProblemEncounteredCmt: Sequelize.STRING,
  requirementsUtilitiesSpecificationCmt: Sequelize.STRING,
  installatioProductRequireHazardousCmt: Sequelize.STRING,
  productsRawMaterialsCmt: Sequelize.STRING,
  operationHaveNegativeImpactCmt: Sequelize.STRING,
  riskAnalysisProjectCmt: Sequelize.STRING,
  previousRiskAnalysisCmt: Sequelize.STRING,
  processesProductsCmtsCmt: Sequelize.STRING,

  /* 7. Operation Conditions */
  customizedPlant: Sequelize.Boolean,
  newServiceBySubsidiary: Sequelize.Boolean,
  includeTransportationActivities: Sequelize.Boolean,
  operationDoneByCustomer: Sequelize.Boolean,
  operatingWithoutDesign: Sequelize.Boolean,
  noOperatingExperienceSimilarProcess: Sequelize.Boolean,
  potentialBackflow: Sequelize.Boolean,
  specialTraining: Sequelize.Boolean,
  unattendedFacility: Sequelize.Boolean,
  remoteFillingLines: Sequelize.Boolean,
  operationCmts: Sequelize.Boolean,
  customizedPlantCmt: Sequelize.STRING,
  newServiceBySubsidiaryCmt: Sequelize.STRING,
  includeTransportationActivitiesCmt: Sequelize.STRING,
  operationDoneByCustomerCmt: Sequelize.STRING,
  operatingWithoutDesignCmt: Sequelize.STRING,
  noOperatingExperienceSimilarProcessCmt: Sequelize.STRING,
  potentialBackflowCmt: Sequelize.STRING,
  specialTrainingCmt: Sequelize.STRING,
  unattendedFacilityCmt: Sequelize.STRING,
  remoteFillingLinesCmt: Sequelize.STRING,
  operationCmtsCmt: Sequelize.STRING,

  /* 8. Customer Requirements */
  notFullyDefined: Sequelize.Boolean,
  technicalIssues: Sequelize.Boolean,
  contractualTargets: Sequelize.Boolean,
  requiredStudiesReliability: Sequelize.Boolean,
  safetyIntegrityLevel: Sequelize.Boolean,
  mandatoryCustomerStandards: Sequelize.Boolean,
  specificInsurance: Sequelize.Boolean,
  requiredStudies: Sequelize.Boolean,
  peakFlowRequirement: Sequelize.Boolean,
  customerRequirementCmts: Sequelize.Boolean,
  notFullyDefinedCmt: Sequelize.STRING,
  technicalIssuesCmt: Sequelize.STRING,
  contractualTargetsCmt: Sequelize.STRING,
  requiredStudiesReliabilityCmt: Sequelize.STRING,
  safetyIntegrityLevelCmt: Sequelize.STRING,
  mandatoryCustomerStandardsCmt: Sequelize.STRING,
  specificInsuranceCmt: Sequelize.STRING,
  requiredStudiesCmt: Sequelize.STRING,
  peakFlowRequirementCmt: Sequelize.STRING,
  customerRequirementCmtsCmt: Sequelize.STRING,

  /* 9. Regulatory Obligations / Environmental */
  regulatoryInformation: Sequelize.Boolean,
  lackOfKnowledge: Sequelize.Boolean,
  environmentalImpactStudy: Sequelize.Boolean,
  societalRiskAnalysis: Sequelize.Boolean,
  explosiveAreaClassification: Sequelize.Boolean,
  safetyHazardStudy: Sequelize.Boolean,
  oSHA: Sequelize.Boolean,
  areaClassificationElectrical: Sequelize.Boolean,
  pressureVesselRegulation: Sequelize.Boolean,
  transportationRegulation: Sequelize.Boolean,
  electricalEquipmentEegulation: Sequelize.Boolean,
  otherRegulation: Sequelize.Boolean,
  otherApplicablePermits: Sequelize.Boolean,
  softwareProcessControl: Sequelize.Boolean,
  regulatoryInformationCmt: Sequelize.STRING,
  lackOfKnowledgeCmt: Sequelize.STRING,
  pressureVesselRegulationCmt: Sequelize.STRING,
  transportationRegulationCmt: Sequelize.STRING,
  electricalEquipmentEegulationCmt: Sequelize.STRING,
  otherRegulationCmt: Sequelize.STRING,
  otherApplicablePermitsCmt: Sequelize.STRING,
  softwareProcessControlCmt: Sequelize.STRING,

  /* 10. Consequences of supply or delivery loss (flow interruption) */
  corporateImage: Sequelize.Boolean,
  impactOnCustomer: Sequelize.Boolean,
  impactOnStrategic: Sequelize.Boolean,
  financialLoss: Sequelize.Boolean,
  impactOnAL: Sequelize.Boolean,
  contractualPenalties: Sequelize.Boolean,
  consequencesComments: Sequelize.Boolean,
  corporateImageCmt: Sequelize.STRING,
  impactOnCustomerCmt: Sequelize.STRING,
  impactOnStrategicCmt: Sequelize.STRING,
  financialLossCmt: Sequelize.STRING,
  impactOnALCmt: Sequelize.STRING,
  contractualPenaltiesCmt: Sequelize.STRING,
  consequencesCommentsCmt: Sequelize.STRING,

  /* 11. In case of acquisition (Project type acquisition) */
  technicalInspection: Sequelize.Boolean,
  potentialNonComplianceSafety: Sequelize.Boolean,
  significantDiscrepanciesAL: Sequelize.Boolean,
  potentialIssueCompetencies: Sequelize.Boolean,
  obsoleteEquipment: Sequelize.Boolean,
  potentialNonComplianceEnvironmental: Sequelize.Boolean,
  facilityAge: Sequelize.Boolean,
  acquisitionComments: Sequelize.Boolean,

  technicalInspectionCmt: Sequelize.STRING,
  potentialNonComplianceSafetyCmt: Sequelize.STRING,
  significantDiscrepanciesALCmt: Sequelize.STRING,
  potentialIssueCompetenciesCmt: Sequelize.STRING,
  obsoleteEquipmentCmt: Sequelize.STRING,
  potentialNonComplianceEnvironmentalCmt: Sequelize.STRING,
  facilityAgeCmt: Sequelize.STRING,
  acquisitionCommentsCmt: Sequelize.STRING
},
{ timestamps: false,
  freezeTableName: true
}
)

module.exports = PRI
